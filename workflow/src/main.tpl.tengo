// Gene browser
//
// Expected arguments:
//	- ref: Ref		- a reference to the raw counts PColumn
//
// Output:
//	- normCounts: p-frame	- normalized counts p-frame
//	- logCounts: p-frame	- log transformed normalized counts p-frame
//



wf := import("@platforma-sdk/workflow-tengo:workflow")
exec := import("@platforma-sdk/workflow-tengo:exec")
pfCountsConv := import(":pf-counts-conv")
xsv := import("@platforma-sdk/workflow-tengo:pframes.xsv")
pframes := import("@platforma-sdk/workflow-tengo:pframes")
assets := import("@platforma-sdk/workflow-tengo:assets")

wf.prepare(func(args){
	return{
		resolvedInput: wf.resolve(args.countsRef, { errIfMissing: true })
	}
})

wf.body(func(args) {

	blockId := wf.blockId().getDataAsJson()

	rawCounts := args.resolvedInput
	inputSpec := rawCounts.spec
	species := inputSpec.domain["pl7.app/species"]

	// convert PColumn to csv

	csvCounts := xsv.exportFrame([rawCounts], "csv", {})

	countNorm := exec.builder().
		software(assets.importSoftware("@platforma-open/milaboratories.run-normalize-counts-r.software:main")).
		arg("rawCounts.csv").arg(".").arg(species).
		addFile("rawCounts.csv", csvCounts).
		saveFile("normalized_counts.csv").
		//saveFile("lognormalized_counts.csv").
		printErrStreamToStdout().
		saveStdoutContent().
		cache(24 * 60 * 60 * 1000).
		run()

	normCountsImportParams := pfCountsConv.getColumns(blockId, inputSpec)
	normPf := xsv.importFile(countNorm.getFile("normalized_counts.csv"), "csv", normCountsImportParams)

	// annotateGenes := exec.builder().
	// 	cmd("/usr/bin/env").
	// 	arg("bash").
	// 	arg("-c").
	// 	arg("normalize_counts.R rawCounts.csv").
	// 	addFile("rawCounts.csv").
	// 	saveFile("normalized_counts.csv").
	// 	saveFile("lognormalized_counts.csv").
	// 	printErrStreamToStdout().
	// 	saveStdoutContent().
	// 	cache(24 * 60 * 60 * 1000).
	// 	run()


	// rawPf := countNorm.output("rawPf")
	// logNormPf := countNorm.output("logNormPf")

	return {
		outputs: {
			normPf: pframes.exportFrame(normPf)
		},
		exports: {}
	}
})
